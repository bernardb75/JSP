Zacznijmy od tego, któr¹ ga³¹Ÿ informatyki mam zamiar omawiaæ, poniewa¿ pojêcie "informatyka" jest bardzo wieloznaczne. W sumie to informatykiem w dzisiejszym skomputeryzowanym œwiecie mo¿e nazwaæ siê prawie ka¿dy - wystarczy, ¿e potrafi siê przetwarzaæ informacjê znajduj¹ce siê w naszych komputerach, czyli np. przeszukiwaæ zawartoœæ internetu przy pomocy wyszukiwarki.
Ja mam zamiar przekazaæ Ci tajniki w jaki sposób efektywnie uczyæ siê programowaæ. Co to tak naprawdê oznacza s³owo PROGRAMOWANIE? Programowanie oznacza pisanie kodu w jakimœ jêzyku, czyli czymœ za pomoc¹ czego mo¿emy komunikowaæ siê z nasz¹ mo¿na by rzec bez nas g³upi¹ (przynajmniej na razie) maszyn¹ PC (Personal Computer). Czyli programowanie mo¿na by porównaæ do pisania tej¿e tutaj lekcji, przy pomocy której komunikujê siê z Tob¹ w jêzyku polskim. My skupimy siê jednak na programowaniu w innym jêzyku, a dok³adniej bêdzie nim Java. Oznacza to, ¿e przy pomocy Javy, bêdziemy pisaæ pewnego rodzaju artyku³ w naszym wypadku bêdzie to kod Ÿród³owy, który zostanie zamieniony na jêzyk zrozumia³y przez nasz¹ maszynê.
2. Jak efektywnie siê uczyæ?
Zrozum jak dzia³a komputer
To co teraz napiszê podkreœlam jest mo¿na by rzec najwa¿niejszym czynnikiem, aby zrozumieæ to co programujemy. Programuj¹c musimy zdawaæ sobie sprawê z tego, ¿e maszyna, która czyta nasze programy JEST G£UPIA, co z tego, ¿e liczy kilkanaœcie tysiêcy razy szybciej ni¿ my, kiedy nie potrafi (przynajmniej na razie) racjonalnie myœleæ. Jeœli ona myœli, to myœli tylko tak jak kaza³ jej to robiæ jakiœ program, czyli tak naprawdê cz³owiek, bo w koñcu programy pisz¹ ludzie.
Do czego zmierzam? Otó¿ pisz¹c programy powinniœmy zdawaæ sobie z tego sprawê, ¿e maszyna nie domyœli siê Twoich zamiarów oraz Ciê nie poprawi. Ona wykona kod, który Ty napisa³eœ w 100% tak jak go napisa³eœ. Czyli kod ZAWSZE dzia³a teoretycznie prawid³owo z tym co napisaliœmy. Czyli to nie maszyna pope³nia b³¹d w interpretowaniu, ale to my podczas pisania pope³niamy b³êdy.
Co z tego wynika? Powinniœmy pisz¹c programy zni¿yæ siê do poziomu komputera i myœleæ tak jak program, który nazywa siê kompilator. Kompilator tak ogólnie mówi¹c, nie wbijaj¹c siê w szczegó³y interpretuje kod Ÿród³owy (czyli to co my piszemy), a nastêpnie (pomijaj¹c kilka kroków) zamienia go w jêzyk zrozumia³y przez komputer. Czyli jaki? Po prostu zmienia go w ci¹g zer oraz jedynek, czyli np. 0110 0011 1100 0001 1111... . Dlaczego s¹ to 0 oraz 1? Bo akurat takie napiêcia naj³atwiej otrzymywaæ komputerowi. Co to oznacza? Oznacza to, ¿e wszystkie programy powinniœmy pisaæ tak jakbyœmy to my byli kompilatorami. Czyli czytamy kod Ÿród³owy OD GÓRY DO DO£U, w taki te¿ sposób bêdzie wykonywany nasz program (z pewnymi wyj¹tkami).
Reasumuj¹c pope³niaj¹c b³¹d nie rozbijajmy monitora, ani nie przeklinajmy na komputer bo to nie jego wina ;) Bo on nie myœli... Myœlimy tylko my i niestety pisz¹c program musimy zni¿yæ siê do poziomu kompilatora.
Ucz siê jêzyka angielskiego
Je¿eli chcesz na powa¿nie "zabawiæ siê" w programowanie to powinieneœ znaæ jêzyk angielski na przynajmniej œrednim poziomie. Dlaczego? Wszystkie biblioteki tzn. zbiór pewnego rodzaju zabawek do tworzenia mniej oraz bardziej skomplikowanych programów s¹ opisane w jêzyku angielskim. Do jakiegoœ poziomu mo¿esz znaleŸæ kursy jêzyka programowania w naszym rodzimym jêzyku, ale im wy¿ej zajdziesz tym trudniej bêdzie Ci takie kursy znaleŸæ. Dodatkowo 90% tych (jak ja to tymczasowo nazwa³em) zabawek, s¹ opisane najczêœciej tylko w bibliotekach.
Nastêpnym argumentem za tym, aby uczyæ siê angielskiego jest to, ¿e wszystkie jêzyki programowania tak¿e s¹ w jêzyku angielskim. Dla przyk³adu linijka: public static void - z niej mogê wywnioskowaæ, ¿e: 

Public - z ang. publiczne - dostêpne dla wszystkich
Static - z ang. statyczne - czyli bêdzie w jakimœ sensie sta³e 
Void - z ang. puste - czyli nie bêdzie pewnego rodzaju wartoœci?

